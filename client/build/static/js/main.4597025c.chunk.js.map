{"version":3,"sources":["components/Animation.js","components/ShortUrl.js","App.js","serviceWorker.js","index.js"],"names":["Animation","r1","useRef","r2","r3","r4","useEffect","gsap","to","current","x","duration","viewBox","width","height","className","y","fill","ref","ShortUrl","props","shortUrl","shorty","err","console","log","href","rel","target","App","context","state","longUrl","errorMsg","e","this","setState","value","preventDefault","fetch","action","method","credentials","headers","body","JSON","stringify","then","response","json","data","src","id","onSubmit","onChange","type","name","onClick","handleClear","Component","defaultProps","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4597025c.chunk.js","sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport { gsap } from \"gsap\";\nimport \"./Animation.css\";\n\nconst Animation = () => {\n  const r1 = useRef(null);\n  const r2 = useRef(null);\n  const r3 = useRef(null);\n  const r4 = useRef(null);\n\n  useEffect(() => {\n      gsap.to (r1.current, {x: -30, duration: 2.4});\n      gsap.to (r2.current, {x: -50, duration: 2.4});\n      gsap.to (r3.current, {x: -70, duration: 2.4});\n      gsap.to (r4.current, {x: -90, duration: 2.4});\n\n  }, []);\n\n  return (\n    <div>\n    <svg viewBox=\"0 0 300 45\" width=\"340\" height=\"50\">\n      <text className=\"shortr-logo\" x=\"0\" y=\"45\" fill=\"#1fbddf\">S</text>\n      <text className=\"shortr-logo\" x=\"20\" y=\"45\" fill=\"#1fbddf\">H</text>\n      <text className=\"shortr-logo\" x=\"40\" y=\"45\" fill=\"#1fbddf\">O</text>\n      <text className=\"shortr-logo\" x=\"60\" y=\"45\" fill=\"#1fbddf\">R</text>\n      <text className=\"shortr-logo\" x=\"80\" y=\"45\" fill=\"#1fbddf\">T</text>\n      <text className=\"shortr-logo\" x=\"100\" y=\"45\" fill=\"#1fbddf\">R</text>\n      <text ref={r1} className=\"shortr-logo\" x=\"130\" y=\"45\" fill=\"#1fbddf\">R</text>\n      <text ref={r2} className=\"shortr-logo\" x=\"150\" y=\"45\" fill=\"#1fbddf\">R</text>\n      <text ref={r3} className=\"shortr-logo\" x=\"170\" y=\"45\" fill=\"#1fbddf\">R</text>\n    </svg>\n    </div>\n  );\n};\n\nexport default Animation;\n","import React from \"react\";\nimport \"./ShortUrl.css\";\n\nconst ShortUrl = (props) => {\n  const shortUrl = props.shorty;\n  const err = props.err;\n  console.log(\"shortUrl: \" + shortUrl);\n  if (err !== \"\") {\n    return (\n      <div>\n        <p className=\"shorturl-error-display\">Please enter a valid URL</p>\n      </div>\n    );\n  }\n  if (shortUrl !== \"\") {\n    return (\n      <div>\n        <p className=\"shorturl-display\">Your shortened URL is ready to use: <a href={props.shorty} rel=\"noopener noreferrer\" target=\"_blank\">{props.shorty}</a></p>\n    </div>\n    );\n  }\n  return (\n    <div></div>\n  );\n};\n\nexport default ShortUrl;\n","import React, { Component } from 'react';\nimport Animation from './components/Animation';\nimport ShortUrl from './components/ShortUrl';\nimport './App.css';\n\nexport default class App extends Component {\n\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n          longUrl: '',\n          shortUrl: '',\n          errorMsg: ''\n       };\n    }\n\n    onChange(e) {\n        this.setState({\n            longUrl: e.target.value\n        });\n    }\n\n    handleClear() {\n      this.setState({\n        longUrl: '',\n        shortUrl: '',\n        errorMsg: ''\n      });\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n        fetch(this.props.action, {\n            method: this.props.method,\n            credentials: 'same-origin',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Access-Control-Allow-Credentials': true,\n                'Access-Control-Allow-Origin': true\n            },\n            body: JSON.stringify({\"longUrl\": this.state.longUrl})\n        })\n        .then(response => response.json())\n        .then(data => {\n          console.log(data);\n          if (data === \"Invalid URL\") {\n            this.setState({errorMsg: data});\n          } else {\n            this.setState({shortUrl: data.shortUrl});\n          }\n        });\n\n        this.setState({longUrl: ''});\n        this.setState({shortUrl: ''});\n    }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"header\">\n          <script src=\"https://cdnjs.cloudflare.com/ajax/libs/gsap/3.5.0/gsap.min.js\"></script>\n          <Animation />\n        </div>\n        <div className=\"hero-image\">\n          <form\n            id=\"url-entry\"\n            action={this.props.action}\n            method={this.props.method}\n            onSubmit={(e) => this.onSubmit(e)}\n            className=\"url-input-container\">\n            <label>\n              <span className=\"shortr-subhead\">Save characters and shorten your links:</span>\n              <input onChange={(e) => this.onChange(e)} type=\"text\" name=\"longUrl\" className=\"url-input\"/><br/>\n            </label>\n            <div className=\"button-container\">\n              <button>Submit</button>\n              <input type=\"reset\" onClick={() => this.handleClear()} value=\"Clear\"/>\n            </div>\n          </form>\n          <ShortUrl err={this.state.errorMsg} shorty={this.state.shortUrl} />\n        </div>\n      </div>\n    );\n  }\n}\n\nApp.defaultProps = {\n    action: 'http://localhost:5000/api/genurl',\n    method: 'post'\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}